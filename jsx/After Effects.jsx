// this is where you write whatever magic you want to happen.function magic() {  // app.project.item(1).layer(1).sourceText("asdf").trace();  // var txtFile = "/";  // var file = new File(txtFile);  // var str = "My string of text";  // file.open("w"); // open file with write access  // file.writeln("First line of text");  // file.writeln("Second line of text " + str);  // file.write(str);  // file.close();  // return 'app.project';  // alert('magic!');  return 'app.project';}// var magic = (function() {  // var printAppProject = function() {  //   alert('asdf', app.project);  // }//   return app.project;// };function GenerateCompName(location) {  if(location instanceof Project) {    return "CompGen " + app.project.items.length;  }  if(location instanceof CompItem) {    return "LayerGen " +location.numLayers;           }}function NestInComp(comp, thing){  return comp.layers.add(thing);}function BoundedRandom( minValue, maxValue ){    return minValue + Math.round(((maxValue - minValue) * Math.random()));}function MakeLayer(junkFolder, ioComp, minLayers, maxLayers, minDepth, maxDepth){    var layerType = BoundedRandom(0,1);    var newLayer = null;    if(maxDepth > minDepth) {       if(layerType == 0) {           var width = BoundedRandom(10, ioComp.width);           var height = BoundedRandom(10, ioComp.height);           var newLayer = ioComp.layers.addSolid([Math.random(), Math.random(), Math.random()], "Solid",  width, height, 1.0 );        } else if( layerType == 1) {            var newComp = MakeComp(junkFolder);            newLayer = NestInComp(ioComp, newComp);            var newMaxDepth = BoundedRandom(minDepth, maxDepth - 1);            FillOutComp( junkFolder,  newComp, minLayers, maxLayers, minDepth, newMaxDepth)        }                newLayer.transform.position.expression = "transform.position.wiggle(" + BoundedRandom(1,7) +"," + BoundedRandom(2,200) + ", 1);";            newLayer.transform.opacity.setValue(50);            newLayer.transform.opacity.expression = "transform.opacity.wiggle(4, 50);";        }}function FillOutComp(junkFolder, ioComp, minLayers, maxLayers, minDepth, maxDepth){    // a comp can have from min to maxLayer. Use random to choose how many    var numLayersToGen = BoundedRandom(minLayers, maxLayers);    for( var i = 0; i < numLayersToGen; i++) {       MakeLayer(junkFolder, ioComp, minLayers, maxLayers, minDepth, maxDepth );    }    return ioComp;}function MakeComp(junkFolder){   return junkFolder.items.addComp(GenerateCompName(app.project), 1000, 500, 1.0, 30, 30 );}function Generate(){    var junkFolder = app.project.items.addFolder("Junk " + app.project.items.length);    var debugComp =  app.project.items.addComp("app.project " + app.project.items.length, 1000, 500, 1.0, 30, 30 );    FillOutComp(junkFolder, debugComp,                                                          1 ,  // minLayers                                                        10, // maxLayers                                                        3,   //minDepth                                                        5); // maxDepth                                                        }$._ext = {    generateComplexComp : function()    {		alert("done");    alert("Creating dummy project, app version=" + app.version);    // magic();    // Generate();    },    magic_ext : function() {      // var _this = this;      // var file = "~/Desktop/this.txt";      // var f = new File([""], file);      // f.open("w");      // f.writeln("------3q45q34543----");      // // f.writeln(JSON.stringify(_this));      // f.close();      alert('this', this);      alert('file', file);    }};// magic();